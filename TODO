*Fixes*
- Fix sorting in firefox?

*New Features*
- Import .grmt files
- Import gourmet datbases?
- Bring "copy recipe" button into main recipe interface
- Simple export to file functionality (back-up) (part-way...)
- Improve full-app layout on mobile to save screen space
- Save "purchased" state of shopping list items 
- i18n
- Look into FF extension/other browser extensions
- Consider moving more work to webworkers? e.g. recipe parsing?
- Nutritional Information

**Extension**
- Make chrome extension notice when we've already imported a page. 
- Make chrome extension "helper" view
- Create start/login page for chrome extension + app (when we haven't signed in yet)
- Allow pushing parsers from web-app to chrome extension so we don't have to update chrome extension (?)


*Refactor/Code Change/Development Improvements*
- Refactor / Use typescript???
- Improve autoparsing
  -> Build proper testing framework for looking at import and parser w/o having
     to wait for extension reloads
     -> Test our node address handler -- it seems like we're managing to double
        or triple import the same stuff when automatically parsing, and if we
        could clear that up, it would be much better.

*Testing*
- Consider automated test of recipe editing -- it seems really easy to
  screw up the state handling so the save/revert buttons don't show
  up. (speaking of - we broke recipe editing state updates again
  somehow???)  (YES -- just broke sidebar w/ a recipe change by accident. Worth
  automated testing of these components with empty state / bad data / good data)
  -> Note: I've built a framework for testing the recipe widget simply enough
  -> Testing save/edit buttons involves either having or mocking state and store
     which is rather a pain...

- Test Syncing from local to cloud... 